#if !defined(FLOW_TIMER_H)
	 #define FLOW_TIMER_H

#include <atomic>
#include <chrono>
#include <condition_variable>
#include <functional>
#include <map>
#include <mutex>
#include <thread>
#include <vector>

//!\file timer.h
//!
//!\brief Defines the \ref flow::timer base class and the \ref flow::monotonous_timer concrete timer class.

namespace flow
{

//!\brief Base class for an object that notifies listeners at some interval.
class timer
{
	std::atomic<bool> d_stop_a;

protected:
	typedef std::map<size_t, const std::function<void ()>> listeners_t;	//!< Convenience typedef.
	listeners_t d_listeners;	//!< Listeners of this timer.
	size_t d_next_index;		//!< The token tat maps to a listener.

	std::mutex d_listeners_m;	//!< Mutex to protect modifications to d_listeners.

public:
	timer() : d_stop_a(false), d_next_index(0) {}

	virtual ~timer() {}

	//!\brief Returns true if the timer is stopped.
	virtual bool stopped() const
	{
		return d_stop_a;
	}

	//!\brief Stop the timer.
	virtual void stop()
	{
		d_stop_a = true;
	}

	//!\brief Adds a listener to this timer.
	//!
	//!\param listener A functor that will be called at interval.
	//!\return The token to pass to \ref ignore.
	virtual size_t listen(const std::function<void ()>& listener)
	{
		std::lock_guard<std::mutex> lg(d_listeners_m);
		d_listeners.insert(std::make_pair(d_next_index, listener));
		return d_next_index++;
	}

	//!\brief Removes a previously added listener.
	//!
	//!\param token A value previously returned by \ref listen.
	virtual void ignore(const size_t token)
	{
		std::lock_guard<std::mutex> lg(d_listeners_m);
		d_listeners.erase(token);
	}

	//!\brief Execution function to be implemented by concrete timers.
	//!
	//! This function must return as soon as possible after the timer is stopped.
	virtual void operator()() = 0;
};

//!\brief Concrete timer that notifies listeners repeatedly at a set interval of time.
class monotonous_timer : public timer
{
	std::chrono::milliseconds d_interval;

	std::condition_variable d_stopped_cv;
	std::mutex d_stopped_m;

public:
	//!\param interval The time to wait between notifications. Must be a duration typedef from \<chrono\>.
	template<typename Duration>
	monotonous_timer(const Duration& interval) : d_interval(std::chrono::duration_cast<std::chrono::milliseconds>(interval)) {}

	virtual ~monotonous_timer() {}

	virtual void stop()
	{
		timer::stop();

		d_stopped_cv.notify_one();
	}

	//!\brief Implementation of timer::operator()().
	virtual void operator()()
	{
		while(!stopped())
		{
			{
				std::lock_guard<std::mutex> lg(d_listeners_m);
				for(auto& listener : d_listeners)
				{
					listener.second();
				}
			}
			
			// Wait until time has expired OR timer is stopped.
			std::unique_lock<std::mutex> l_stopped(d_stopped_m);
			d_stopped_cv.wait_for(l_stopped, d_interval);
		}
	}
};

}

#endif

/*
	(C) Copyright Thierry Seegers 2010-2012. Distributed under the following license:

	Boost Software License - Version 1.0 - August 17th, 2003

	Permission is hereby granted, free of charge, to any person or organization
	obtaining a copy of the software and accompanying documentation covered by
	this license (the "Software") to use, reproduce, display, distribute,
	execute, and transmit the Software, and to prepare derivative works of the
	Software, and to permit third-parties to whom the Software is furnished to
	do so, all subject to the following:

	The copyright notices in the Software and this entire statement, including
	the above license grant, this restriction and the following disclaimer,
	must be included in all copies of the Software, in whole or in part, and
	all derivative works of the Software, unless such copies or derivative
	works are solely in the form of machine-executable object code generated by
	a source language processor.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
	SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
	FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
	DEALINGS IN THE SOFTWARE.
*/
